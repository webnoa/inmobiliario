# Ruta: /REAL_ESTATE_AGENT/graph/nodes/preprocesar_contexto.py

import re
# --- CAMBIO CLAVE: A√±adimos 'Dict' a la importaci√≥n ---
from typing import TypedDict, Any, Dict

# Importamos la funci√≥n de Redis
from tools.redis import recuperar_contexto

# Definici√≥n del estado del grafo
class GraphState(TypedDict, total=False):
    pregunta: str
    intencion: str
    respuesta: str
    usuario: str
    propiedades_encontradas: list
    datos_visita: dict
    datos_visita_confirmada: dict

# Frases que, si se usan solas, se consideran ambiguas
_FRASES_AMBIGUAS = {
    "y el precio", "cu√°nto sale", "y la otra", "y las fotos",
    "contame m√°s", "dame m√°s detalles",
    "cual me conviene", "cu√°l me conviene", "cual me conviene m√°s", "comparala", "comp√°ralas",
    "quiero verla", "agendar una visita", "me interesa"
}

def _es_ambigua(txt: str) -> bool:
    """
    Determina si una pregunta es ambigua bas√°ndose en una lista de frases
    o en una heur√≠stica simple.
    """
    t = txt.strip().lower()
    if t in _FRASES_AMBIGUAS:
        return True
    # Heur√≠stica: menos de 5 palabras y no contiene verbos/sustantivos clave
    if len(t.split()) <= 4 and not re.search(r"(casa|depto|visita|agendar|precio|cuanto|buscar)", t):
        return True
    return False

def preprocesar_contexto_node(state: GraphState) -> Dict[str, Any]:
    """
    Nodo que revisa si la pregunta es ambigua. Si lo es, intenta reemplazarla
    con el contexto de la √∫ltima pregunta guardada en Redis.
    """
    print("---üß† NODO: PREPROCESAR CONTEXTO---")
    pregunta = state.get("pregunta", "")
    usuario = state.get("usuario", "anonimo")

    if _es_ambigua(pregunta):
        print(f"Pregunta ambigua detectada: '{pregunta}'")
        
        ultima_pregunta_contexto = recuperar_contexto(usuario, "ultima_pregunta")

        texto_contexto = None
        if isinstance(ultima_pregunta_contexto, dict):
            texto_contexto = ultima_pregunta_contexto.get("texto")
        elif isinstance(ultima_pregunta_contexto, str):
            texto_contexto = ultima_pregunta_contexto
        
        if texto_contexto and texto_contexto != pregunta:
            nueva_pregunta = f"{texto_contexto} y {pregunta}"
            print(f"‚Ü©Ô∏è Sustituyendo por contexto. Nueva pregunta: '{nueva_pregunta}'")
            return {"pregunta": nueva_pregunta}

    return {}