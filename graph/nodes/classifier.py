# Ruta: /REAL_ESTATE_AGENT/graph/nodes/classifier.py

from typing import Dict, Any
from datetime import datetime
from tools.redis import guardar_en_historial, guardar_contexto
from tools.intent_embeddings import clasificar_por_semantica

# ... (la definici√≥n de GraphState no cambia) ...
class GraphState(dict): # Usar dict simple es m√°s flexible
    pass

def clasificar_intencion_node(state: Dict[str, Any]) -> Dict[str, Any]:
    """
    Clasifica la intenci√≥n del usuario con un orden de prioridad l√≥gico y definitivo.
    """
    print("---üéØ NODO: CLASIFICAR INTENCI√ìN (v3)---")
    pregunta = state.get("pregunta", "").lower()
    usuario = state.get("usuario", "anonimo")
    intencion = ""

    # --- REGLAS DE CLASIFICACI√ìN POR PRIORIDAD DEFINITIVA ---

    # Prioridad 1: Agendar. Es la acci√≥n m√°s espec√≠fica.
    if any(p in pregunta for p in ["agendar", "visitar", "cita", "turno", "verla"]):
        intencion = "agendar"
        print("‚úî Detectado por keyword de M√ÅXIMA prioridad ‚Üí agendar")

    # Prioridad 2: Comparar.
    elif any(p in pregunta for p in ["comparar", "compara", "diferencias", "vs"]):
        intencion = "comparar"
        print("‚úî Detectado por keyword de alta prioridad ‚Üí comparar")

    # Prioridad 3: B√∫squeda.
    elif any(p in pregunta for p in ["buscar", "busco", "mostrar", "mostrame", "casa", "casas", "depto", "deptos", "departamento"]):
        intencion = "buscar"
        print("‚úî Detectado por keyword de b√∫squeda ‚Üí buscar")

    # Prioridad 4: Fallback a clasificaci√≥n sem√°ntica.
    else:
        intencion = clasificar_por_semantica(pregunta)
        print(f"‚úî Detectado por embeddings ‚Üí {intencion}")

    guardar_en_historial(usuario, pregunta, intencion, "")
    guardar_contexto(usuario, "ultima_intencion", {"intencion": intencion})
    
    return {"intencion": intencion}