# Ruta: /REAL_ESTATE_AGENT/graph/nodes/classifier.py

from typing import Dict, Any
from datetime import datetime
from tools.redis import guardar_en_historial, guardar_contexto
from tools.intent_embeddings import clasificar_por_semantica

class GraphState(dict):
    pass

def clasificar_intencion_node(state: Dict[str, Any]) -> Dict[str, Any]:
    """
    Clasifica la intenci√≥n del usuario usando un enfoque h√≠brido por capas,
    dando prioridad m√°xima a las keywords expl√≠citas.
    """
    print("---üéØ NODO: CLASIFICAR INTENCI√ìN (v8 - A Prueba de Balas)---")
    pregunta = state.get("pregunta", "").lower().strip()
    usuario = state.get("usuario", "anonimo")
    intencion = ""

    # --- CAPA 1: Keywords de Acci√≥n de Alta Prioridad ---
    # Estas son las acciones m√°s importantes y espec√≠ficas.
    if any(p in pregunta for p in ["agendar", "visitar", "cita", "turno", "verla"]):
        intencion = "agendar"
        print("‚úî Detectado por keyword de M√ÅXIMA prioridad ‚Üí agendar")
    
    elif any(p in pregunta for p in ["favorito", "favoritos", "guarda", "guardar", "agregar", "a√±adir", "quitar", "eliminar", "borrar"]):
        intencion = "favorito"
        print("‚úî Detectado por keyword de M√ÅXIMA prioridad ‚Üí favorito")

    elif any(p in pregunta for p in ["comparar", "compara", "diferencias", "vs"]):
        intencion = "comparar"
        print("‚úî Detectado por keyword de alta prioridad ‚Üí comparar")

    # --- CAPA 2: Keywords de B√∫squeda ---
    # Se comprueba solo si no se encontr√≥ una acci√≥n de mayor prioridad.
    elif any(p in pregunta for p in ["buscar", "busco", "mostrar", "mostrame", "casa", "casas", "depto", "deptos", "departamento", "alquiler", "venta"]):
        intencion = "buscar"
        print("‚úî Detectado por keyword de b√∫squeda ‚Üí buscar")

    # --- CAPA 3: Fallback a Sem√°ntica ---
    # Solo si NINGUNA keyword coincidi√≥, intentamos con embeddings.
    else:
        intencion_semantica = clasificar_por_semantica(pregunta)
        intencion = intencion_semantica
        print(f"‚úî Detectado por embeddings como √∫ltimo recurso ‚Üí {intencion}")

    # El log final nos dice qu√© se decidi√≥ antes de guardar.
    print(f"==> Intenci√≥n final decidida: {intencion}")

    guardar_en_historial(usuario, pregunta, intencion, "")
    guardar_contexto(usuario, "ultima_intencion", {"intencion": intencion})
    
    return {"intencion": intencion}