# Ruta: /REAL_ESTATE_AGENT/tools/react_tools.py

from langchain.agents import tool, create_react_agent, AgentExecutor
from langchain_community.chat_models import ChatOpenAI
from langchain import hub
from typing import Dict, Any

# Importamos las funciones de Redis y DB para que las herramientas puedan usarlas
from .redis import guardar_contexto, recuperar_contexto, recuperar_historial
from .db import obtener_propiedades_por_ids

# --- DefiniciÃ³n de Herramientas para el Agente ReAct ---

@tool
def saludar(usuario: str) -> str:
    """Saluda al usuario, intentando usar su nombre si estÃ¡ guardado en el contexto."""
    nombre_guardado = recuperar_contexto(usuario, "nombre_usuario")
    if nombre_guardado:
        return f"Â¡Hola, {nombre_guardado}! QuÃ© bueno verte de nuevo. Â¿En quÃ© te puedo ayudar hoy?"
    return "Â¡Hola! Soy tu asistente inmobiliario. Â¿En quÃ© puedo ayudarte?"

@tool
def recordar_nombre_usuario(nombre: str, usuario: str) -> str:
    """Guarda el nombre del usuario para futuras interacciones."""
    guardar_contexto(usuario, "nombre_usuario", nombre)
    return f"Â¡Mucho gusto, {nombre}! He guardado tu nombre. Â¿En quÃ© puedo ayudarte?"

@tool
def buscar_ultima_busqueda(usuario: str) -> str:
    """Busca y resume la Ãºltima bÃºsqueda de propiedades realizada por un usuario."""
    ultima_busqueda = recuperar_contexto(usuario, "ultima_busqueda")
    if ultima_busqueda and isinstance(ultima_busqueda, dict):
        texto_busqueda = ultima_busqueda.get("texto", "una bÃºsqueda anterior")
        return f"Tu Ãºltima bÃºsqueda fue sobre: '{texto_busqueda}'. Â¿Quieres continuar con eso?"
    return "No tengo registrada una bÃºsqueda reciente para ti. Â¿QuÃ© te gustarÃ­a buscar?"

# --- NUEVA HERRAMIENTA ---
@tool
def obtener_detalles_propiedad(id_propiedad: int) -> str:
    """
    Busca y devuelve los detalles completos de una Ãºnica propiedad usando su ID.
    Es Ãºtil si el usuario pregunta 'muÃ©strame la propiedad 6' o 'dame detalles del ID 3'.
    """
    try:
        propiedades = obtener_propiedades_por_ids([id_propiedad])
        if not propiedades:
            return f"No encontrÃ© ninguna propiedad con el ID {id_propiedad} en la base de datos."
        
        prop = propiedades[0]
        detalles = (
            f"Â¡Claro! AquÃ­ tienes los detalles de la Propiedad ID {prop.get('id')}:\n"
            f"- TÃ­tulo: {prop.get('title', 'N/A')}\n"
            f"- Tipo: {prop.get('type', 'N/A').capitalize()}\n"
            f"- UbicaciÃ³n: {prop.get('location', 'N/A')}\n"
            f"- Precio: ${prop.get('price', 0):,}\n"
            f"- Ambientes: {prop.get('rooms', 'N/A')}\n"
            f"- Superficie: {prop.get('area_m2', 'N/A')} mÂ²"
        )
        return detalles
    except Exception as e:
        print(f"ðŸš¨ Error en la herramienta obtener_detalles_propiedad: {e}")
        return "Tuve un problema al buscar los detalles de esa propiedad en la base de datos."

@tool
def respuesta_por_defecto(pregunta_original: str) -> str:
    """Ãšsalo como Ãºltimo recurso cuando ninguna otra herramienta sea apropiada."""
    return "Lo siento, no estoy seguro de cÃ³mo ayudarte con eso. Soy un asistente inmobiliario. Puedo buscar, comparar o agendar visitas a propiedades. Â¿CÃ³mo te gustarÃ­a proceder?"

# --- Lista de Herramientas y Prompt ---

TOOLS = [
    saludar,
    recordar_nombre_usuario,
    buscar_ultima_busqueda,
    obtener_detalles_propiedad, # <-- Herramienta nueva y potente
    respuesta_por_defecto,
]

PROMPT = hub.pull("hwchase17/react")

# --- FÃ¡brica del Agente ---
def crear_agente_react() -> AgentExecutor:
    llm = ChatOpenAI(model="gpt-4o", temperature=0, streaming=True)
    agent = create_react_agent(llm=llm, tools=TOOLS, prompt=PROMPT)
    agent_executor = AgentExecutor(
        agent=agent, tools=TOOLS, verbose=True,
        max_iterations=5, handle_parsing_errors=True
    )
    return agent_executor